repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'pmd'
apply plugin: TestingModelBasePlugin

configurations.errorprone {
    resolutionStrategy.force 'com.google.errorprone:error_prone_core:2.0.9'
}

sourceSets {
    dev
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

task run(type: JavaExec) {
    classpath = sourceSets.dev.runtimeClasspath

    main = 'edu.wpi.first.wpilibj.DevMain'
}

test.dependsOn project(':hal').nativeTestFilesJar
run.dependsOn project(':hal').nativeTestFilesJar
test.dependsOn project(':ntcore').nativeTestFilesJar
run.dependsOn project(':ntcore').nativeTestFilesJar
test.dependsOn project(':cscore').nativeTestFilesJar
run.dependsOn project(':cscore').nativeTestFilesJar

def versionClass = """
package edu.wpi.first.wpilibj.util;

/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */

public final class WPILibVersion {
  public static final String Version = "${WPILibVersion.version}";
}
""".trim()

def wpilibVersionFile = file('src/main/java/edu/wpi/first/wpilibj/util/WPILibVersion.java')

def willPublish = false
gradle.taskGraph.addTaskExecutionGraphListener { graph ->
    willPublish = graph.hasTask(publish)
}

task generateJavaVersion() {
    description = 'Generates the wpilib version class.'
    group = 'WPILib'

    // We follow a simple set of checks to determine whether we should generate a new version file:
    // 1. If the release type is not development, we generate a new verison file
    // 2. If there is no generated version number, we generate a new version file
    // 3. If there is a generated build number, and the release type is development, then we will
    //    only generate if the publish task is run.
    doLast {
        if (!WPILibVersion.releaseType.toString().equalsIgnoreCase('official') && !willPublish && wpilibVersionFile.exists()) {
            return
        }
        println "Writing version ${WPILibVersion.version} to $wpilibVersionFile"

        if (wpilibVersionFile.exists()) {
            wpilibVersionFile.delete()
        }
        wpilibVersionFile.write(versionClass)
    }
}

clean {
    delete wpilibVersionFile
}

compileJava.dependsOn generateJavaVersion

pmd {
    sourceSets = [sourceSets.main]
    consoleOutput = true
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files(new File(rootDir, "styleguide/pmd-ruleset.xml"))
    ruleSets = []
}

dependencies {
    compile project(':hal')
    compile project(':wpiutil')
    compile project(':ntcore')
    compile 'org.opencv:opencv-java:3.2.0'
    compile project(':cscore')
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.guava:guava:19.0'
    testRuntime files(project(':hal').nativeTestFilesJar.archivePath)
    testRuntime files(project(':ntcore').nativeTestFilesJar.archivePath)
    testRuntime 'org.opencv:opencv-jni:3.2.0:all'
    testRuntime files(project(':cscore').nativeTestFilesJar.archivePath)
    devCompile project(':hal')
    devCompile project(':wpiutil')
    devCompile project(':ntcore')
    devCompile 'org.opencv:opencv-java:3.2.0'
    devCompile project(':cscore')
    devCompile sourceSets.main.output
    devRuntime files(project(':hal').nativeTestFilesJar.archivePath)
    devRuntime files(project(':ntcore').nativeTestFilesJar.archivePath)
    devRuntime 'org.opencv:opencv-jni:3.2.0:all'
    devRuntime files(project(':cscore').nativeTestFilesJar.archivePath)
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

if (project.hasProperty('onlyAthena')) {
    test.enabled = false
}

apply from: 'publish.gradle'
