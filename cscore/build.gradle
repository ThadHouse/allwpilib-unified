ext {
  nativeName = 'cscore'
  devMain = 'edu.wpi.cscore.DevMain'
}

apply from: "${rootDir}/shared/jni/setupBuild.gradle"

dependencies {
    compile 'org.opencv:opencv-java:3.2.0'
    testRuntime 'org.opencv:opencv-jni:3.2.0:all'
    devCompile 'org.opencv:opencv-java:3.2.0'
    devRuntime 'org.opencv:opencv-jni:3.2.0:all'
}

model {
  // Exports config is a utility to enable exporting all symbols in a C++ library on windows to a DLL.
  // This removes the need for DllExport on a library. However, the gradle C++ builder has a bug
  // where some extra symbols are added that cannot be resolved at link time. This configuration
  // lets you specify specific symbols to exlude from exporting.
  exportsConfigs {
    cscore(ExportsConfig) {
      x86ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                            '_CT??_R0?AVbad_cast',
                            '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                            '_TI5?AVfailure' ]
      x64ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                            '_CT??_R0?AVbad_cast',
                            '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                            '_TI5?AVfailure' ]
    }
    cscoreJNI(ExportsConfig) {
      x86SymbolFilter = { symbols->
        def retList = []
        symbols.each { symbol->
            if (symbol.startsWith('CS_') || symbol.startsWith('Java_') || symbol.startsWith('JNI_')) {
                retList << symbol
            }
        }
        return retList
      }
      x64SymbolFilter = { symbols->
        def retList = []
        symbols.each { symbol->
            if (symbol.startsWith('CS_') || symbol.startsWith('Java_') || symbol.startsWith('JNI_')) {
                retList << symbol
            }
        }
        return retList
      }
    }
  }
  dependencyConfigs {
    opencv(DependencyConfig) {
      groupId = 'org.opencv'
      artifactId = 'opencv-cpp'
      headerClassifier = 'headers'
      ext = 'zip'
      version = '3.2.0'
      sharedConfigs = [ cscore: [],
                        cscoreBase: [],
                        cscoreDev: [],
                        cscoreTestingBaseTest: [] ]
      staticConfigs = [ cscoreJNI: [] ]
    }
  }
}

checkstyle {
    sourceSets = []
}
