apply plugin: 'cpp'
apply plugin: 'google-test'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: SingleNativeBuild
apply plugin: ExtraTasks
apply plugin: 'java'

apply from: "${rootDir}/shared/config.gradle"

sourceSets {
  dev
}

task run(type: JavaExec) {
  classpath = sourceSets.dev.runtimeClasspath
  main = devMain
}

build.dependsOn devClasses

dependencies {
  testCompile 'junit:junit:4.12'
  devCompile sourceSets.main.output
}

model {
  components {
    "${nativeName}Base"(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
      binaries.all {
        if (it instanceof SharedLibraryBinarySpec) {
          it.buildable = false
          return
        }
      }
    }
    "${nativeName}"(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs "${rootDir}/shared/singlelib"
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
    }
    // By default, a development executable will be generated. This is to help the case of
    // testing specific functionality of the library.
    if (!project.hasProperty('skipDevExe')) {
      "${nativeName}Dev"(NativeExecutableSpec) {
        sources {
          cpp {
            source {
              srcDirs 'src/dev/native/cpp'
              include '**/*.cpp'
              lib library: nativeName
            }
            exportedHeaders {
              srcDirs 'src/dev/native/include'
            }
          }
        }
      }
    }
    // The TestingBase library is a workaround for an issue with the GoogleTest plugin.
    // The plugin by default will rebuild the entire test source set, which increases
    // build time. By testing an empty library, and then just linking the already built component
    // into the test, we save the extra build
    "${nativeName}TestingBase"(NativeLibrarySpec) { }
  }
  testSuites {
    "${nativeName}TestingBaseTest" {
      sources {
        cpp {
          source {
            srcDirs 'src/test/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/test/native/include', 'src/main/native/cpp'
          }
        }
      }
    }
  }
  binaries {
    withType(GoogleTestTestSuiteBinarySpec) {
      if (it.component.testedComponent.name.contains('TestingBase') && !project.hasProperty('onlyAthena')) {
        lib project: ':gmock', library: 'gmock', linkage: 'static'
        lib library: nativeName, linkage: 'shared'
      } else {
        it.buildable = false
      }
    }
  }
  tasks {
    def c = $.components
    project.tasks.create('runCpp', Exec) {
      def found = false
      c.each {
        if (it in NativeExecutableSpec && it.name == "${nativeName}Dev") {
          it.binaries.each {
            if (!found) {
              def arch = it.targetPlatform.architecture.name
              if (arch == 'x86-64' || arch == 'x86') {
                dependsOn it.tasks.install
                commandLine it.tasks.install.runScript
                found = true
              }
            }
          }
        }
      }
    }
  }
}
