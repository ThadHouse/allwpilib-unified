import org.gradle.language.base.internal.ProjectLayout

if (!project.hasProperty('skipAthena')) {
    apply plugin: 'cpp'
    apply plugin: 'visual-studio'
    apply plugin: 'edu.wpi.first.NativeUtils'

    apply from: '../shared/config.gradle'

    ext.examplesMap = [:]
    ext.templatesMap = [:]

    File examplesTree = file("$projectDir/src/main/cpp/examples")
    examplesTree.list(new FilenameFilter() {
      @Override
      public boolean accept(File current, String name) {
        return new File(current, name).isDirectory();
      }
    }).each {
        examplesMap.put(it, [])
    }
    File templatesTree = file("$projectDir/src/main/cpp/templates")
    templatesTree.list(new FilenameFilter() {
      @Override
      public boolean accept(File current, String name) {
        return new File(current, name).isDirectory();
      }
    }).each {
        templatesMap.put(it, [])
    }

    ext {
        sharedCvConfigs = examplesMap + templatesMap
        staticCvConfigs = [:]
        useJava = false
        useCpp = true
    }

    apply from: "${rootDir}/shared/opencv.gradle"

    model {
        components {
            examplesMap.each { key, value->
                "${key}"(NativeExecutableSpec) {
                    binaries.all { binary->
                        if (binary.targetPlatform.architecture.name == 'athena') {
                            lib project: ':wpilibc', library: 'wpilibc', linkage: 'shared'
                            lib project: ':ntcore', library: 'ntcore', linkage: 'shared'
                            lib project: ':cscore', library: 'cscore', linkage: 'shared'
                            lib project: ':hal', library: 'hal', linkage: 'shared'
                            lib project: ':cameraserver', library: 'cameraserver', linkage: 'shared'
                            lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                            project(':ni-libraries').addNiLibrariesToLinker(binary)
                        } else {
                            binary.buildable = false
                        }
                    }
                    sources {
                        cpp {
                            source {
                                srcDirs 'src/main/cpp/examples/' + "${key}"
                                include '**/*.cpp'
                            }
                        }
                    }
                }
            }
            templatesMap.each { key, value->
                "${key}"(NativeExecutableSpec) {
                    binaries.all { binary->
                        if (binary.targetPlatform.architecture.name == 'athena') {
                            lib project: ':wpilibc', library: 'wpilibc', linkage: 'shared'
                            lib project: ':ntcore', library: 'ntcore', linkage: 'shared'
                            lib project: ':cscore', library: 'cscore', linkage: 'shared'
                            lib project: ':hal', library: 'hal', linkage: 'shared'
                            lib project: ':cameraserver', library: 'cameraserver', linkage: 'shared'
                            lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                            project(':ni-libraries').addNiLibrariesToLinker(binary)
                        } else {
                            binary.buildable = false
                        }
                    }
                    sources {
                        cpp {
                            source {
                                srcDirs 'src/main/cpp/templates/' + "${key}"
                                include '**/*.cpp'
                            }
                        }
                    }
                }
            }
        }
    }
    apply from: 'publish.gradle'
}
